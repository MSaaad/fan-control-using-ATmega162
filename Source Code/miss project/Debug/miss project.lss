
miss project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000770  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069b  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000350  00000000  00000000  0000104b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000139c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000388  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000139  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000018a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 92 00 	call	0x124	; 0x124 <main>
  80:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <read_adc>:
	read_adc();
}
void read_adc(void)
{
	char num = 0;
	PORTB = PORTB | 0b00001110;
  88:	88 b3       	in	r24, 0x18	; 24
  8a:	8e 60       	ori	r24, 0x0E	; 14
  8c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	87 ea       	ldi	r24, 0xA7	; 167
  90:	91 e6       	ldi	r25, 0x61	; 97
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <read_adc+0xa>
  96:	00 c0       	rjmp	.+0      	; 0x98 <read_adc+0x10>
  98:	00 00       	nop
	_delay_ms(100);
	PORTB = PORTB&0b11110011;
  9a:	88 b3       	in	r24, 0x18	; 24
  9c:	83 7f       	andi	r24, 0xF3	; 243
  9e:	88 bb       	out	0x18, r24	; 24
	while((PINB&0b00010010) == 0b00010010);
  a0:	86 b3       	in	r24, 0x16	; 22
  a2:	82 71       	andi	r24, 0x12	; 18
  a4:	82 31       	cpi	r24, 0x12	; 18
  a6:	e1 f3       	breq	.-8      	; 0xa0 <read_adc+0x18>
	while((PINB&0b00010010) == 0b00000010);
  a8:	86 b3       	in	r24, 0x16	; 22
  aa:	82 71       	andi	r24, 0x12	; 18
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	e1 f3       	breq	.-8      	; 0xa8 <read_adc+0x20>
	PORTB = PORTB | (0b00100010);
  b0:	88 b3       	in	r24, 0x18	; 24
  b2:	82 62       	ori	r24, 0x22	; 34
  b4:	88 bb       	out	0x18, r24	; 24
	num = PINC;
  b6:	83 b3       	in	r24, 0x13	; 19
  b8:	ef e4       	ldi	r30, 0x4F	; 79
  ba:	f3 ec       	ldi	r31, 0xC3	; 195
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <read_adc+0x34>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <read_adc+0x3a>
  c2:	00 00       	nop
	_delay_ms(200);
	PORTB = PORTB&(0b11011111);
  c4:	c5 98       	cbi	0x18, 5	; 24
	PORTD = num;
  c6:	82 bb       	out	0x12, r24	; 18
	if(num == 0b00000000)
  c8:	81 11       	cpse	r24, r1
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <read_adc+0x4a>
	{
		OCR2=255;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	82 bd       	out	0x22, r24	; 34
  d0:	08 95       	ret
	}
	else if((num > 0b00000000) & (num <= 0b00110011))
  d2:	9f ef       	ldi	r25, 0xFF	; 255
  d4:	98 0f       	add	r25, r24
  d6:	93 33       	cpi	r25, 0x33	; 51
  d8:	18 f4       	brcc	.+6      	; 0xe0 <read_adc+0x58>
	{
		OCR2=200;
  da:	88 ec       	ldi	r24, 0xC8	; 200
  dc:	82 bd       	out	0x22, r24	; 34
  de:	08 95       	ret
	}
	else if((num > 0b00110011) & (num <= 0b01100110))
  e0:	9c ec       	ldi	r25, 0xCC	; 204
  e2:	98 0f       	add	r25, r24
  e4:	93 33       	cpi	r25, 0x33	; 51
  e6:	18 f4       	brcc	.+6      	; 0xee <read_adc+0x66>
	{
		OCR2=160;
  e8:	80 ea       	ldi	r24, 0xA0	; 160
  ea:	82 bd       	out	0x22, r24	; 34
  ec:	08 95       	ret
	}
	else if((num > 0b01100110) & (num <= 0b10011001))
  ee:	99 e9       	ldi	r25, 0x99	; 153
  f0:	98 0f       	add	r25, r24
  f2:	93 33       	cpi	r25, 0x33	; 51
  f4:	18 f4       	brcc	.+6      	; 0xfc <read_adc+0x74>
	{
		OCR2=127;
  f6:	8f e7       	ldi	r24, 0x7F	; 127
  f8:	82 bd       	out	0x22, r24	; 34
  fa:	08 95       	ret
	}
	else if((num > 0b10011001) & (num <= 0b11001100))
  fc:	96 e6       	ldi	r25, 0x66	; 102
  fe:	98 0f       	add	r25, r24
 100:	93 33       	cpi	r25, 0x33	; 51
 102:	18 f4       	brcc	.+6      	; 0x10a <read_adc+0x82>
	{
		OCR2=80;
 104:	80 e5       	ldi	r24, 0x50	; 80
 106:	82 bd       	out	0x22, r24	; 34
 108:	08 95       	ret
	}
	else if((num > 0b11001100) & (num <= 0b11111111))
 10a:	8d 3c       	cpi	r24, 0xCD	; 205
 10c:	18 f0       	brcs	.+6      	; 0x114 <read_adc+0x8c>
	{
		OCR2=30;
 10e:	8e e1       	ldi	r24, 0x1E	; 30
 110:	82 bd       	out	0x22, r24	; 34
 112:	08 95       	ret
	}
		else if(num == 0b11111111)
 114:	8f 3f       	cpi	r24, 0xFF	; 255
 116:	09 f4       	brne	.+2      	; 0x11a <read_adc+0x92>
		{
			OCR2=0;
 118:	12 bc       	out	0x22, r1	; 34
 11a:	08 95       	ret

0000011c <adc>:
		adc();
	}
}
void adc(void)
{
	PORTE = 0x00;
 11c:	17 b8       	out	0x07, r1	; 7
	read_adc();
 11e:	0e 94 44 00 	call	0x88	; 0x88 <read_adc>
 122:	08 95       	ret

00000124 <main>:
void read_adc(void);


int main(void)
{
	DDRA = 0b00000000;
 124:	1a ba       	out	0x1a, r1	; 26
	DDRC = 0b00000000;
 126:	14 ba       	out	0x14, r1	; 20
	DDRE = 0xFF;
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	86 b9       	out	0x06, r24	; 6
	DDRB = 0b00101111;
 12c:	9f e2       	ldi	r25, 0x2F	; 47
 12e:	97 bb       	out	0x17, r25	; 23
//	DDRB = 0x10011111;
	DDRD = 0xFF;
 130:	81 bb       	out	0x11, r24	; 17
	TCCR2 |= (1<<WGM21)|(1<<WGM20)|(1<<COM21)|(1<<COM20)|(1<<CS21);
 132:	87 b5       	in	r24, 0x27	; 39
 134:	8a 67       	ori	r24, 0x7A	; 122
 136:	87 bd       	out	0x27, r24	; 39
	TCCR0 |=(1<<WGM01)|(1<<COM00)|(1<<CS00);
 138:	83 b7       	in	r24, 0x33	; 51
 13a:	89 61       	ori	r24, 0x19	; 25
 13c:	83 bf       	out	0x33, r24	; 51
	OCR0 = 2;
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	81 bf       	out	0x31, r24	; 49
	PORTB = 0B00010010;
 142:	82 e1       	ldi	r24, 0x12	; 18
 144:	88 bb       	out	0x18, r24	; 24
	while(1)
	{
		adc();
 146:	0e 94 8e 00 	call	0x11c	; 0x11c <adc>
 14a:	fd cf       	rjmp	.-6      	; 0x146 <main+0x22>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
